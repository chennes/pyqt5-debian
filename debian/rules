#!/usr/bin/make -f
# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

export DH_OPTIONS=${EXTRA_DH_OPTIONS}

CFLAGS=
CPPFLAGS=
CXXFLAGS=
LDFLAGS=
ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
	CFLAGS += -O0 -g
	CXXFLAGS += -O0
else
	CFLAGS += $(shell dpkg-buildflags --get CFLAGS)
	CPPFLAGS += $(shell dpkg-buildflags --get CPPFLAGS)
	CXXFLAGS += $(shell dpkg-buildflags --get CXXFLAGS)
	LDFLAGS += $(shell dpkg-buildflags --get LDFLAGS)
endif

LDFLAGS += -Wl,-O1 -Wl,--as-needed

SPLIT=10

DEFAULT_PYTHON := $(shell py3versions -vd)
ALLPYTHONS := $(shell py3versions -vr)

PYQT_MODULES := opengl sql webchannel webkit websockets xmlpatterns svg \
	multimedia quick serialport sensors x11extras positioning

PY_PACKAGE_NAMES := pyqt5 $(PYQT_MODULES:%=pyqt5.qt%) dbus.mainloop.pyqt5

export QT_SELECT=qt5

# LIBS_* is unset to avoid linking to too many libraries
# STRIP is unset to let stripping be handled by dh_strip
SHARED_CONFIGURE_OPTIONS=--confirm-license --verbose \
	--concatenate $(SPLIT) \
	--no-make \
	--qmake-setting 'QMAKE_CFLAGS += "${CFLAGS} ${CPPFLAGS}"' \
	--qmake-setting 'QMAKE_CXXFLAGS += "${CXXFLAGS} ${CPPFLAGS}"' \
	--qmake-setting 'QMAKE_LFLAGS += "${LDFLAGS}"'


.PRECIOUS: build-%/configure-stamp dbg-build-%/configure-stamp

configure: $(ALLPYTHONS:%=build-%/configure-stamp) $(ALLPYTHONS:%=dbg-build-%/configure-stamp)

build-%/configure-stamp:
	dh_testdir
	python$* /usr/bin/sip-build $(SHARED_CONFIGURE_OPTIONS) \
			--build-dir build-$* \
			--target-dir /usr/lib/python$*/dist-packages \
			$(if $(filter $(DEFAULT_PYTHON),$*),--pep484-pyi,--no-designer-plugin --no-qml-plugin)
	sed -i '/strip/d' build-$*/*/Makefile
	touch $@

dbg-build-%/configure-stamp:
	dh_testdir
	python$*-dbg /usr/bin/sip-build $(SHARED_CONFIGURE_OPTIONS) \
			--build-dir dbg-build-$* \
			--target-dir /usr/lib/python$*/dist-packages \
			--debug --no-designer-plugin --no-qml-plugin --no-tools
	sed -i '/strip/d' dbg-build-$*/*/Makefile
	sed -i 's/-isystem/-I/' dbg-build-$*/*/Makefile
	touch $@


build: build-arch build-indep
build-arch: $(ALLPYTHONS:%=build-%/build-stamp) $(ALLPYTHONS:%=dbg-build-%/build-stamp)
build-indep: $(ALLPYTHONS:%=build-%/build-stamp)

build-%/build-stamp: build-%/configure-stamp
	dh_testdir
	dh_auto_build --parallel -B build-$*
	touch $@

dbg-build-%/build-stamp: dbg-build-%/configure-stamp
	dh_testdir
	dh_auto_build --parallel -B dbg-build-$*
	touch $@

install-indep: build-indep
	dh_testdir
	dh_testroot
	dh_prep -i

	# Install the files to temporary location to be able to use pyrcc5 below
	set -ex; for p in $(ALLPYTHONS); do \
		$(MAKE) -C build-$$p install INSTALL_ROOT=$(CURDIR)/debian/tmp; \
	done

	dh_installdirs -i
	dh_install -i
	dh_installexamples -Xactiveqt -i
	# Use python3 shebangs and regenerate resource files
	export PYTHONPATH=$(CURDIR)/debian/tmp/usr/lib/python$(DEFAULT_PYTHON)/dist-packages; \
	cd $(CURDIR)/debian/pyqt5-examples/usr/share/doc/pyqt5-examples/examples/; \
		cp --preserve=timestamps /usr/share/javascript/jquery/jquery.min.js webkit/fancybrowser/; \
		find . -name '*.py' -exec sed -i 's/\/env python/\/python3/g' {} +; \
		find . -name '*.qrc' | sed 's/\.qrc//g' | QT_HASH_SEED=0 xargs -I {} \
		$(CURDIR)/debian/tmp/usr/bin/pyrcc5 {}.qrc -o {}_rc.py
	# Symlink duplicate files in examples. Based on Andrew Starr-Bochicchio's
	# code in ubuntu-packaging-guide.
	cd $(CURDIR)/debian/pyqt5-examples && \
	fdupes -r1nq usr/share/doc/pyqt5-examples/examples | while read s; do \
		set -- $$(echo $$s | tr ' ' '\n' | sort); \
		f=$$1; shift; for d; do \
			echo "symlinking identical file $$d to $$f"; \
			rm $$d; ln -s /$$f $$d; \
		done; \
	done
	dh_link -i

install-arch: build-arch
	dh_testdir
	dh_testroot
	dh_prep -a
	dh_installdirs -a
	# This is needed to enforce that the install-arch-% rules are
	# not run in parallel. Both rules install into the same directory,
	# and therefore might try to access the same files at the same time.
	# Therefore, instead of depending on the install-arch-% rules,
	# we invoke them explicitly.
	for p in $(ALLPYTHONS) ; do \
		$(MAKE) -f debian/rules install-arch-$$p;\
	done

	dh_install -a
	dh_missing --fail-missing
	sed -i 's,/usr/bin/python3[.0-9]*,/usr/bin/python3,' debian/pyqt5-dev-tools/usr/bin/*

	find debian/python*-dbg ! -type d \
		! \( -name '*.so' -o -name '*config_*d*.py' \) | xargs rm -f

install-arch-3.%:
	$(MAKE) -C build-3.$* install INSTALL_ROOT=$(CURDIR)/debian/tmp
	$(MAKE) -C dbg-build-3.$* install INSTALL_ROOT=$(CURDIR)/debian/tmp

clean:
	dh_testdir
	dh_testroot
	rm -rf $(ALLPYTHONS:%=build-%) $(ALLPYTHONS:%=dbg-build-%)
	find . -type f -name .DS_Store -delete
	find . -type f -name *.pyc -delete
	find . -type d -name __pycache__ -delete
	cd sip; rm -rf Qt opengl_types.sip pyqt-gpl.sip5
	rm -f examples/quick/tutorials/extending/chapter6-plugins/Charts/qmldir
	dh_clean

# Must not depend on anything. This is to be called by
# binary-arch/binary-indep
# in another 'make' thread.
binary-common:
	dh_testdir
	dh_testroot
	dh_installman
	dh_installchangelogs
	dh_installdocs -A NEWS
ifeq (,$(findstring -i, $(DH_OPTIONS)))
	DH_OPTIONS= dh_strip -ppyqt5-dev-tools
	set -e; \
	for p in $(PY_PACKAGE_NAMES:%=python3-%); do \
		DH_OPTIONS= dh_strip -p$$p --dbg-package=$$p-dbg; \
		rm -rf debian/$$p-dbg/usr/share/doc/$$p-dbg; \
		mkdir -p debian/$$p-dbg/usr/share/doc; \
		ln -s $$p debian/$$p-dbg/usr/share/doc/$$p-dbg; \
	done
endif
	dh_python3 --no-dbg-cleaning -N pyqt5-examples
	rm -rf $(CURDIR)/debian/python3-pyqt5/usr/lib/python3/dist-packages/PyQt5/uic/port_v2
	rm -rf $(CURDIR)/debian/python3-pyqt5-dbg/usr/bin
	rm -rf $(CURDIR)/debian/python3-pyqt5-dbg/usr/lib/python3/dist-packages/PyQt5/uic
	rm -rf $(CURDIR)/debian/python3-pyqt5-dbg/usr/lib/python3/dist-packages/dbus
	rm -rf $(CURDIR)/debian/pyqt5-examples/usr/share/doc/pyqt5-examples/examples/webkit/googlechat
	rm -rf $(CURDIR)/debian/pyqt5-examples/usr/share/doc/pyqt5-examples/examples/designer/plugins/python/__pycache__
	rm -rf $(CURDIR)/debian/pyqt5-examples/usr/share/doc/pyqt5-examples/examples/designer/plugins/widgets/__pycache__
	dh_fixperms
	dh_compress -X/examples
	dh_installdeb
	dh_shlibdeps
	dh_gencontrol
	dh_md5sums
	dh_builddeb

# Build architecture independant packages using the common target.
binary-indep: install-indep
	$(MAKE) -f debian/rules DH_OPTIONS="-i ${EXTRA_DH_OPTIONS}" binary-common

# Build architecture dependant packages using the common target.
binary-arch: install-arch
	$(MAKE) -f debian/rules DH_OPTIONS="-a ${EXTRA_DH_OPTIONS}" binary-common


binary: binary-arch binary-indep

.PHONY: build-indep build-arch build clean binary-indep binary-arch binary configure
